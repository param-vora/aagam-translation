import streamlit as st # type: ignore
import os
from google.cloud import translate_v3 as translate
import openai # type: ignore

from config import OPENAI_API_KEY, PARENT

# Set up Google Cloud credentials
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = 'aagam-translation-2.json'  

# Set up OpenAI API key
openai.api_key = OPENAI_API_KEY  

# Initialize Google Cloud Translate client (v3)
translate_client = translate.TranslationServiceClient()
parent = PARENT  

# Caching the translation function
@st.cache_data(ttl=3600)  # Cache data for 1 hour
def translate_text_v3(text, target_language="en"):
    response = translate_client.translate_text(
        contents=[text],
        target_language_code=target_language,
        parent=parent,
        mime_type="text/plain"
    )
    return response.translations[0].translated_text

# Caching the refinement function
@st.cache_data(ttl=3600)  # Cache data for 1 hour
def refine_translation(translated_text, refinement_level='moderate', handle_ambiguity=True):
    prompt_old = (
        f"""You are an expert translator proficient in Gujarati, English, and Jain philosophy.
        Your task is to refine the resultant English translation you receive, making it natural, fluent, and coherent.
        DO NOT CHANGE THE LENGTH AND EXACT MEANING OF THE TEXT.
        Ensure grammar is correct and fill in any missed words.
        Apply a {refinement_level} level of refinement.
        {'If there are any ambiguities, make an educated guess while staying true to the original meaning.' if handle_ambiguity else ''}
        The final output should be at a college graduate reading level. Here is the text:\n\n{translated_text}"""
    )

    prompt = (
    f"""You are an expert translator proficient in Gujarati, English, and Jain philosophy.
        **Task:**
        Refine the provided English translation to make it natural, fluent, and coherent.

        **Source of Input:**
        - The input text is an English translation generated by the Google Translate V3 API from a section of one of the Jain Aagam Shastras books originally written in Gujarati.

        **Instructions:**
        1. **Tone:** 
        - Maintain a formal and professional tone suitable for academic or business audiences.
        2. **Reading Level:** 
        - Ensure the output is at a college graduate reading level, assuming the reader has some background knowledge of Jain philosophy.
        3. **Refinement:**
        - Apply a moderate level of refinement by improving grammar and syntax.
        - Suggest alternative phrases and sentences where necessary to enhance clarity and flow.
        4. **Style Consistency:** 
        - Ensure the translation adheres to the AP Stylebook guidelines.
        5. **Constraints:**
        - **Do Not:** Change the length or alter the exact meaning of the text.
        - **Ambiguities:** If any ambiguities are present, make an educated guess while staying true to the original meaning.
        **Input Text:**\n\n{translated_text}"""
    )

    try:
        response = openai.completions.create(
            model="gpt-4o-mini",
            prompt=prompt,
            max_tokens=3000,
            temperature=0.7
        )
        refined_text = response.choices[0].text.strip()

    except Exception as e:
        print(f"An error occurred: {e}")
        refined_text = "Error: Unable to process the translation."

    return refined_text

def main():
    st.set_page_config(
        page_title="Aagam Shastra - Gujarati to English Translation Tool",
        page_icon=":speech_balloon:",
        layout="wide"
    )
    
    # Center the content
    col1, col2, col3 = st.columns([1,3,1])
    with col2:
        st.title("Aagam Shastra - Gujarati to English Translation Tool")
        
        # Settings
        refinement_level = st.selectbox(
            "Refinement Level",
            options=['minimal', 'moderate', 'extensive'],
            index=1,
            help="Choose how much refinement you want on the translated text."
        )
        handle_ambiguity = st.checkbox(
            "Handle Ambiguity",
            value=True,
            help="If checked, the model will make educated guesses to resolve ambiguities."
        )
        
        # Input section
        st.header("Input")
        if 'gujarati_text' not in st.session_state:
            st.session_state.gujarati_text = ""
        gujarati_text = st.text_area("Enter Gujarati text:", height=200, key="gujarati_input", value=st.session_state.gujarati_text)
        st.session_state.gujarati_text = gujarati_text
        
        translate_button = st.button("Translate")
        
        # Initialize session state for caching translations
        if 'google_translation' not in st.session_state:
            st.session_state.google_translation = ""
        if 'refined_translation' not in st.session_state:
            st.session_state.refined_translation = ""
        
        # Output section
        if translate_button and gujarati_text.strip():
            try:
                with st.spinner('Translating and refining...'):
                    # Stage 1: Translation using Google API
                    st.session_state.google_translation = translate_text_v3(gujarati_text)
                    
                    # Stage 2: Refinement using OpenAI GPT
                    st.session_state.refined_translation = refine_translation(
                        st.session_state.google_translation,
                        refinement_level=refinement_level,
                        handle_ambiguity=handle_ambiguity
                    )
                
                st.success("Translation completed!")
            except Exception as e:
                st.error(f"An error occurred: {e}")
        elif translate_button:
            st.error("Please enter some text to translate.")
        
        # Display outputs if available
        if st.session_state.google_translation or st.session_state.refined_translation:
            st.header("Output")
            output_type = st.radio("Select output:", ("Refined Translation", "Google Translation"), index=0)
            
            if output_type == "Refined Translation":
                output_text = st.session_state.refined_translation
            else:
                output_text = st.session_state.google_translation
            
            st.text_area("Translation Output (you can edit here):", value=output_text, height=300, key="translation_output")
            
            # Option to download the selected translation
            st.download_button(
                label="Download Translation",
                data=output_text,
                file_name=f'{output_type.lower().replace(" ", "_")}.txt',
                mime='text/plain'
            )

if __name__ == "__main__":
    main()